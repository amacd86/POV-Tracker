from flask import Flask, render_template, request, redirect, url_for, flash
from flask_sqlalchemy import SQLAlchemy
from flask_wtf import FlaskForm
from wtforms import StringField, SelectField, DateField, TextAreaField, BooleanField, SubmitField
from wtforms.validators import DataRequired, Length
from datetime import datetime, timedelta
import os
import csv
from io import StringIO
from flask import send_file

# Create Flask app
app = Flask(__name__)
app.config['SECRET_KEY'] = os.environ.get('SECRET_KEY', 'dev-key-for-pov-tracker')
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///pov_tracker.db'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

# Initialize database
db = SQLAlchemy(app)

# Define models
class POV(db.Model):
    __tablename__ = 'povs'

    id = db.Column(db.Integer, primary_key=True)
    customer_name = db.Column(db.String(100), nullable=False)
    assigned_se = db.Column(db.String(100), nullable=False)
    assigned_ae = db.Column(db.String(100), nullable=False)
    start_date = db.Column(db.Date, nullable=False, default=datetime.utcnow)
    projected_end_date = db.Column(db.Date, nullable=False)
    current_stage = db.Column(db.String(50), nullable=False)
    roadblocks = db.Column(db.Text)
    overcome_roadblocks = db.Column(db.Boolean, default=False)
    status = db.Column(db.String(20), default='Active')
    created_at = db.Column(db.DateTime, nullable=False, default=datetime.utcnow)
    updated_at = db.Column(db.DateTime, nullable=False, default=datetime.utcnow, onupdate=datetime.utcnow)
    deleted = db.Column(db.Boolean, default=False)  # For soft delete
    deleted_at = db.Column(db.DateTime)  # For soft delete timestamp

    # Relationship
    notes = db.relationship('Note', backref='pov', lazy=True, cascade='all, delete-orphan')

    def __repr__(self):
        return f"POV('{self.customer_name}', '{self.current_stage}', '{self.status}')"

class Note(db.Model):
    __tablename__ = 'notes'

    id = db.Column(db.Integer, primary_key=True)
    content = db.Column(db.Text, nullable=False)
    timestamp = db.Column(db.DateTime, nullable=False, default=datetime.utcnow)
    pov_id = db.Column(db.Integer, db.ForeignKey('povs.id'), nullable=False)

    def __repr__(self):
        return f"Note('{self.timestamp}', '{self.content[:20]}...')"

# Custom Jinja2 filters and globals
@app.template_filter('nl2br')
def nl2br_filter(s):
    if s:
        return s.replace('\n', '<br>')
    return s

@app.context_processor
def inject_now():
    return {'now': datetime.now}

# Forms
class POVForm(FlaskForm):
    customer_name = StringField('Customer Name', validators=[DataRequired(), Length(min=2, max=100)])
    assigned_se = SelectField('Assigned SE', validators=[DataRequired()],
                              choices=[('John Doe', 'John Doe'), ('Jane Smith', 'Jane Smith'), ('Bob Johnson', 'Bob Johnson')])
    assigned_ae = SelectField('Assigned AE', validators=[DataRequired()],
                              choices=[('Alex Brown', 'Alex Brown'), ('Sarah Lee', 'Sarah Lee'), ('Mike Wilson', 'Mike Wilson')])
    start_date = DateField('Start Date', validators=[DataRequired()], format='%Y-%m-%d')
    projected_end_date = DateField('Projected End Date', validators=[DataRequired()], format='%Y-%m-%d')
    current_stage = SelectField('Current Stage', validators=[DataRequired()],
                                choices=[('Deployment', 'Deployment'), ('Training 1', 'Training 1'),
                                         ('Training 2', 'Training 2'), ('Wrap-Up', 'Wrap-Up'), ('Tech Call', 'Tech Call')])
    roadblocks = TextAreaField('Roadblocks')
    overcome_roadblocks = BooleanField('Roadblocks Overcome')
    status = SelectField('Status', validators=[DataRequired()],
                         choices=[('Active', 'Active'), ('On Hold', 'On Hold'), ('Closed - Won', 'Closed - Won'), ('Closed - Lost', 'Closed - Lost')])
    initial_notes = TextAreaField('Initial Notes')
    submit = SubmitField('Submit')

class NoteForm(FlaskForm):
    content = TextAreaField('Note', validators=[DataRequired()])
    submit = SubmitField('Add Note')

# Routes
@app.route('/')
def dashboard():
    # Get filter parameters
    se_filter = request.args.get('se', '')
    ae_filter = request.args.get('ae', '')
    status_filter = request.args.get('status', '')
    start_date_from = request.args.get('start_date_from', '')
    start_date_to = request.args.get('start_date_to', '')
    end_date_from = request.args.get('end_date_from', '')
    end_date_to = request.args.get('end_date_to', '')

    # Base query - exclude deleted POVs
    query = POV.query.filter_by(deleted=False)

    # Apply filters if provided
    if se_filter:
        query = query.filter(POV.assigned_se == se_filter)
    if ae_filter:
        query = query.filter(POV.assigned_ae == ae_filter)
    if status_filter:
        query = query.filter(POV.status == status_filter)

    # Apply date filters
    if start_date_from:
        try:
            from_date = datetime.strptime(start_date_from, '%Y-%m-%d').date()
            query = query.filter(POV.start_date >= from_date)
        except ValueError:
            flash('Invalid start date format. Please use YYYY-MM-DD format.', 'warning')

    if start_date_to:
        try:
            to_date = datetime.strptime(start_date_to, '%Y-%m-%d').date()
            query = query.filter(POV.start_date <= to_date)
        except ValueError:
            flash('Invalid start date format. Please use YYYY-MM-DD format.', 'warning')

    if end_date_from:
        try:
            from_date = datetime.strptime(end_date_from, '%Y-%m-%d').date()
            query = query.filter(POV.projected_end_date >= from_date)
        except ValueError:
            flash('Invalid end date format. Please use YYYY-MM-DD format.', 'warning')

    if end_date_to:
        try:
            to_date = datetime.strptime(end_date_to, '%Y-%m-%d').date()
            query = query.filter(POV.projected_end_date <= to_date)
        except ValueError:
            flash('Invalid end date format. Please use YYYY-MM-DD format.', 'warning')

    # Get all POVs with applied filters
    povs = query.all()

    # Get unique values for filter dropdowns
    all_ses = db.session.query(POV.assigned_se).distinct().all()
    all_aes = db.session.query(POV.assigned_ae).distinct().all()
    all_statuses = [('Active', 'Active'), ('On Hold', 'On Hold'), ('Closed - Won', 'Closed - Won'), ('Closed - Lost', 'Closed - Lost')]

    return render_template('dashboard.html', povs=povs,
                           all_ses=[se[0] for se in all_ses],
                           all_aes=[ae[0] for ae in all_aes],
                           all_statuses=all_statuses,
                           se_filter=se_filter,
                           ae_filter=ae_filter,
                           status_filter=status_filter,
                           start_date_from=start_date_from,
                           start_date_to=start_date_to,
                           end_date_from=end_date_from,
                           end_date_to=end_date_to)

@app.route('/pov/new', methods=['GET', 'POST'])
def new_pov():
    form = POVForm()

    # Set default dates
    if request.method == 'GET':
        form.start_date.data = datetime.now()
        form.projected_end_date.data = datetime.now() + timedelta(days=30)

    if form.validate_on_submit():
        pov = POV(
            customer_name=form.customer_name.data,
            assigned_se=form.assigned_se.data,
            assigned_ae=form.assigned_ae.data,
            start_date=form.start_date.data,
            projected_end_date=form.projected_end_date.data,
            current_stage=form.current_stage.data,
            roadblocks=form.roadblocks.data,
            overcome_roadblocks=form.overcome_roadblocks.data,
            status=form.status.data,
            deleted=False
        )
        db.session.add(pov)
        db.session.commit()

        # Add initial note if provided
        if form.initial_notes.data:
            note = Note(
                content=form.initial_notes.data,
                pov_id=pov.id
            )
            db.session.add(note)
            db.session.commit()

        flash('POV created successfully!', 'success')
        return redirect(url_for('dashboard'))

    return render_template('pov_form.html', form=form, title='New POV')

@app.route('/pov/<int:id>/edit', methods=['GET', 'POST'])
def edit_pov(id):
    pov = POV.query.get_or_404(id)
    form = POVForm(obj=pov)

    if request.method == 'GET':
        # For edit, don't set initial_notes as it would create duplicate notes
        form.initial_notes.data = ''

    if form.validate_on_submit():
        pov.customer_name = form.customer_name.data
        pov.assigned_se = form.assigned_se.data
        pov.assigned_ae = form.assigned_ae.data
        pov.start_date = form.start_date.data
        pov.projected_end_date = form.projected_end_date.data
        pov.current_stage = form.current_stage.data
        pov.roadblocks = form.roadblocks.data
        pov.overcome_roadblocks = form.overcome_roadblocks.data
        pov.status = form.status.data

        db.session.commit()

        # Add a new note if provided
        if form.initial_notes.data:
            note = Note(
                content=form.initial_notes.data,
                pov_id=pov.id
            )
            db.session.add(note)
            db.session.commit()

        flash('POV updated successfully!', 'success')
        return redirect(url_for('view_pov', id=pov.id))

    return render_template('pov_form.html', form=form, title='Edit POV')

@app.route('/pov/<int:id>')
def view_pov(id):
    pov = POV.query.get_or_404(id)
    note_form = NoteForm()
    notes = Note.query.filter_by(pov_id=id).order_by(Note.timestamp.desc()).all()

    return render_template('pov_detail.html', pov=pov, note_form=note_form, notes=notes)

@app.route('/pov/<int:id>/add_note', methods=['POST'])
def add_note(id):
    pov = POV.query.get_or_404(id)
    form = NoteForm()

    if form.validate_on_submit():
        note = Note(
            content=form.content.data,
            pov_id=id
        )
        db.session.add(note)
        db.session.commit()
        flash('Note added successfully!', 'success')

    return redirect(url_for('view_pov', id=id))

@app.route('/pov/<int:id>/update_stage/<stage>')
def update_stage(id, stage):
    pov = POV.query.get_or_404(id)
    if stage in ['Deployment', 'Training 1', 'Training 2', 'Wrap-Up', 'Tech Call']:
        pov.current_stage = stage
        db.session.commit()
        flash(f'POV stage updated to {stage}!', 'success')

    return redirect(url_for('view_pov', id=id))

@app.route('/pov/<int:id>/mark_complete/<status>')
def mark_complete(id, status):
    pov = POV.query.get_or_404(id)
    if status in ['Closed - Won', 'Closed - Lost']:
        pov.status = status
        db.session.commit()
        flash(f'POV marked as {status}!', 'success')

    return redirect(url_for('dashboard'))

@app.route('/export_csv')
def export_csv():
    # Get non-deleted POVs
    povs = POV.query.filter_by(deleted=False).all()

    # Create a string buffer for our CSV data
    csv_buffer = StringIO()
    csv_writer = csv.writer(csv_buffer)

    # Write header row
    csv_writer.writerow([
        'Customer', 'SE', 'AE', 'Stage', 'Start Date', 'End Date',
        'Status', 'Roadblocks', 'Roadblocks Overcome', 'Notes'
    ])

    # Write data rows
    for pov in povs:
        # Get notes for this POV
        notes = Note.query.filter_by(pov_id=pov.id).order_by(Note.timestamp.desc()).all()
        notes_text = "; ".join([f"{note.timestamp.strftime('%m/%d/%Y')}: {note.content}" for note in notes])

        csv_writer.writerow([
            pov.customer_name,
            pov.assigned_se,
            pov.assigned_ae,
            pov.current_stage,
            pov.start_date.strftime('%m/%d/%Y'),
            pov.projected_end_date.strftime('%m/%d/%Y'),
            pov.status,
            pov.roadblocks or '',
            'Yes' if pov.overcome_roadblocks else 'No',
            notes_text
        ])

    # Reset buffer position
    csv_buffer.seek(0)

    # Create response
    return send_file(
        csv_buffer,
        mimetype='text/csv',
        as_attachment=True,
        download_name=f'POV_Tracker_{datetime.now().strftime("%Y-%m-%d")}.csv'
    )

@app.route('/pov/<int:id>/delete')
def delete_pov(id):
    pov = POV.query.get_or_404(id)

    # Soft delete instead of actual delete
    pov.deleted = True
    pov.deleted_at = datetime.utcnow()
    db.session.commit()

    flash(f'POV for {pov.customer_name} has been moved to trash!', 'success')
    return redirect(url_for('dashboard'))

@app.route('/povs/bulk_action', methods=['POST'])
def bulk_action():
    selected_povs = request.form.getlist('selected_povs')
    action = request.form.get('bulk_action')

    if not selected_povs:
        flash('No POVs selected!', 'warning')
        return redirect(url_for('dashboard'))

    if action == 'delete':
        # Soft delete instead of hard delete
        now = datetime.utcnow()
        povs = POV.query.filter(POV.id.in_(selected_povs)).all()
        count = 0
        for pov in povs:
            pov.deleted = True
            pov.deleted_at = now
            count += 1

        db.session.commit()
        flash(f'{count} POVs have been moved to trash!', 'success')

    elif action == 'mark_active':
        POV.query.filter(POV.id.in_(selected_povs)).update({POV.status: 'Active'}, synchronize_session=False)
        db.session.commit()
        flash(f'{len(selected_povs)} POVs have been marked as Active!', 'success')

    elif action == 'mark_on_hold':
        POV.query.filter(POV.id.in_(selected_povs)).update({POV.status: 'On Hold'}, synchronize_session=False)
        db.session.commit()
        flash(f'{len(selected_povs)} POVs have been marked as On Hold!', 'success')

    elif action == 'mark_won':
        POV.query.filter(POV.id.in_(selected_povs)).update({POV.status: 'Closed - Won'}, synchronize_session=False)
        db.session.commit()
        flash(f'{len(selected_povs)} POVs have been marked as Won!', 'success')

    elif action == 'mark_lost':
        POV.query.filter(POV.id.in_(selected_povs)).update({POV.status: 'Closed - Lost'}, synchronize_session=False)
        db.session.commit()
        flash(f'{len(selected_povs)} POVs have been marked as Lost!', 'success')

    return redirect(url_for('dashboard'))

@app.route('/trash')
def trash():
    # Get only deleted POVs
    deleted_povs = POV.query.filter_by(deleted=True).all()

    return render_template('trash.html', povs=deleted_povs)

@app.route('/pov/<int:id>/restore')
def restore_pov(id):
    pov = POV.query.get_or_404(id)

    # Restore the POV
    pov.deleted = False
    pov.deleted_at = None
    db.session.commit()

    flash(f'POV for {pov.customer_name} has been restored!', 'success')
    return redirect(url_for('trash'))

@app.route('/pov/<int:id>/permanent-delete')
def permanent_delete_pov(id):
    pov = POV.query.get_or_404(id)

    # Delete associated notes first
    Note.query.filter_by(pov_id=id).delete()

    # Delete the POV
    db.session.delete(pov)
    db.session.commit()

    flash(f'POV for {pov.customer_name} has been permanently deleted!', 'success')
    return redirect(url_for('trash'))

@app.route('/trash/empty', methods=['POST'])
def empty_trash():
    # Get IDs of all deleted POVs
    deleted_povs = POV.query.filter_by(deleted=True).all()

    for pov in deleted_povs:
        # Delete associated notes
        Note.query.filter_by(pov_id=pov.id).delete()

        # Delete the POV
        db.session.delete(pov)

    db.session.commit()
    flash('Trash has been emptied!', 'success')
    return redirect(url_for('trash'))

# Initialize the database
@app.cli.command('init-db')
def init_db():
    db.create_all()
    print('Database initialized!')

if __name__ == '__main__':
    app.run(debug=True)